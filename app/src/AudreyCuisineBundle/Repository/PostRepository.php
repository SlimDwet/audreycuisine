<?php

namespace AudreyCuisineBundle\Repository;

use AudreyCuisineBundle\Entity\Post;

/**
 * PostRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PostRepository extends \Doctrine\ORM\EntityRepository
{

    /**
     * Retourne les X derniers articles postés
     * @param  integer $nb [Nombre d'articles à retourner]
     * @return array       [Liste des derniers articles]
     */
    public function getLastPosts(int $nb = 4): array {
        $posts = $this->findBy(
            ['isVisible' => 1],
            ['updated' => 'DESC'],
            $nb
        );
        return $this->toFrontArray($posts);
    }

    /**
     * Retourne un article à partir de son slug
     * @param  string $slug [Slug de l'article]
     * @return array|null        [Article sous forme de tableau]
     */
    public function getPostBySlug(string $slug): ?array {
        $post = $this->findOneBy(['slug' => $slug, 'isVisible' => 1]);
        return is_null($post) ? null : $this->toArray($post);
    }

    /**
     * Formate un tableau d'entité en tableau prêt à être affiché
     * @param  Post[] $posts [Tableau d'entité Post]
     * @return array        [description]
     */
    private function toFrontArray(array $posts): array {
        $result = [];
        foreach ($posts as $keyPost => $Post) {
            // Récupération des catégories de l'article
            $categories = [];
            foreach ($Post->getCategory() as $keyCat => $Category) {
                $categories[$keyCat] = array(
                    'name' => $Category->getName()
                );
            }

            $result[$keyPost] = array(
                'title' => $Post->getTitle(),
                'category' => $categories,
                'content' => $Post->getContent(),
                'contentNoHtml' => strip_tags($Post->getContent()),
                'slug' => $Post->getSlug(),
                'updated' => $Post->getUpdated()->format(\Datetime::ISO8601), // Date au format ISO
                'urlPostThumbnail' => $Post->getUrlPostThumbnail()
            );
        }
        return $result;
    }

    /**
     * Transforme une entité en tableau
     * @param  Post $Post [Entité Post]
     * @return array        [Entité sous forme de tableau]
     */
    private function toArray(Post $Post): array {
        $categories = $comments = [];
        // Récupération des catégories de l'article
        foreach ($Post->getCategory() as $keyCat => $Category) {
            $categories[$keyCat] = array(
                'name' => $Category->getName(),
                'slug' => $Category->getSlug()
            );
        }
        // Récupération des commentaires de l'article
        foreach ($Post->getComments() as $keyComment => $Comment) {
            $comments[$keyComment] = array(
                'author' => $Comment->getName(),
                'content' => $Comment->getContent(),
                'published' => $Comment->getPublished()->format(\Datetime::ISO8601)
            );
        }

        return array(
            'title' => $Post->getTitle(),
            'categories' => $categories,
            'content' => $Post->getContent(),
            'slug' => $Post->getSlug(),
            'published' => $Post->getUpdated()->format(\Datetime::ISO8601), // Date au format ISO
            'urlPostPicture' => $Post->getUrlPostPicture(),
            'views' => $Post->getViews(),
            'author'=> array(
                'name' => $Post->getUser()->getFullName(),
                'url' => $Post->getUser()->getSlug()
            ),
            'comments' => $comments
        );
    }
}
