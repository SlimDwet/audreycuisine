<?php

namespace AudreyCuisineBundle\Repository;

use AudreyCuisineBundle\Entity\Post;

/**
 * PostRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PostRepository extends \Doctrine\ORM\EntityRepository
{

    /**
     * Recherche d'articles à partir des termes
     * @param  string $terms [Termes à rechercher]
     * @return array         [Résultat de la requête]
     */
    public function searchPostsByTerms(string $terms): array {
        $qb = $this->createQueryBuilder('p')
            ->where("p.title LIKE :terms")
            ->orderBy('p.updated', 'DESC')
            ->setParameter('terms', '%'.$terms.'%')
            ->getQuery();
        return $qb->getResult();
    }

    /**
     * Retourne les entités Post appartenant à une catégorie à partir de son slug
     * @param  string $slug [Slug de la catégorie]
     * @return Post[]        [Liste des articles]
     */
    public function getPostsInCategory(string $slug) {
        $qb = $this->createQueryBuilder('p');
        $query = $qb->select('p as post, c.name as category')
            ->join('p.category', 'c')
            ->where('c.slug = :categorySlug')
            ->orderBy('p.updated', 'DESC')
            ->setParameter('categorySlug', $slug)
            ->getQuery();
        return $query->getResult();
    }

    /**
     * Retourne la liste d'articles correspondant aux ingrédients
     * @param  [string] $ingredient1 [Ingrédient 1]
     * @param  [string|null] $ingredient2 [Ingrédient 2]
     * @param  [string|null] $ingredient3 [Ingrédient 3]
     * @return Post[]              [Liste des articles]
     */
    public function getPostsByIngredients($ingredient1, $ingredient2, $ingredient3) {
        $qb = $this->createQueryBuilder('p');
        $qb->join('p.comments', 'comments');
        $query = $qb
            ->where('p.title LIKE :ingredient1 OR p.content LIKE :ingredient1')
            ->setParameter('ingredient1', '%'.$ingredient1.'%');
        if(!is_null($ingredient2)) {
            $query = $qb
                ->andWhere('p.title LIKE :ingredient2 OR p.content LIKE :ingredient2')
                ->setParameter('ingredient2', '%'.$ingredient2.'%');
        }
        if(!is_null($ingredient3)) {
            $query = $qb
                ->andWhere('p.title LIKE :ingredient3 OR p.content LIKE :ingredient3')
                ->setParameter('ingredient3', '%'.$ingredient3.'%');
        }
        $query = $qb
            ->orderBy('p.updated', 'DESC')
            ->getQuery();
        return $query->getResult();
    }

}
